name: Deploy FrostLine

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_PORT: ${{ secrets.SSH_PORT }}
      ORIGIN: https://thegunfirm.com

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate required secrets
        run: |
          set -euo pipefail
          test -n "${{ secrets.SSH_KEY }}"      || { echo "::error::SSH_KEY is empty"; exit 1; }
          test -n "${SSH_HOST}"                 || { echo "::error::SSH_HOST is empty"; exit 1; }
          test -n "${SSH_USER}"                 || { echo "::error::SSH_USER is empty"; exit 1; }
          test -n "${SSH_PORT}"                 || { echo "::error::SSH_PORT is empty"; exit 1; }
          test -n "${{ secrets.DATABASE_URL }}" || { echo "::error::DATABASE_URL is empty"; exit 1; }
          test -n "${{ secrets.RSR_USERNAME }}" || { echo "::error::RSR_USERNAME is empty"; exit 1; }
          test -n "${{ secrets.RSR_PASSWORD }}" || { echo "::error::RSR_PASSWORD is empty"; exit 1; }
          if [ -z "${{ secrets.INVENTORY_ORIGIN }}" ] && [ -z "${{ secrets.INVENTORY_DEV_PUBLIC_URL }}" ]; then
            echo "::error::INVENTORY_ORIGIN or INVENTORY_DEV_PUBLIC_URL must be set"; exit 1;
          fi

      - name: Start ssh-agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Add host to known_hosts
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          ssh-keyscan -p "$SSH_PORT" -H "$SSH_HOST" >> ~/.ssh/known_hosts

      - name: Smoke test SSH
        run: |
          set -euo pipefail
          ssh -o BatchMode=yes -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" "echo ok && whoami && hostname"

      # *** NEW: ship code to Hetzner and build there ***
      - name: Sync source to Hetzner and build
        run: |
          set -euo pipefail
          rsync -az --delete -e "ssh -p $SSH_PORT" \
            --exclude='.git' --exclude='node_modules' \
            ./ "$SSH_USER@$SSH_HOST:/var/www/frostline/"
          ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" '
            set -euo pipefail
            cd /var/www/frostline
            (npm ci --include=dev || npm install)
            npm run build
          '

      # Stamp the live artifact with this workflow's commit + timestamp
      - name: Stamp version.json on server (commit + timestamp)
        env:
          COMMIT_SHA: ${{ github.sha }}
        run: |
          set -euo pipefail
          ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" "bash -se" <<EOF
          set -euo pipefail
          DST=/var/www/frostline/dist/public
          install -d -m 755 "\$DST"
          node -e 'const fs=require("fs"); const p=process.env.DST || "/var/www/frostline/dist/public/version.json"; const d={git_head: process.env.COMMIT_SHA, built_at_utc: new Date().toISOString()}; fs.writeFileSync(p, JSON.stringify(d,null,2)); console.log("stamped", p, d);' \
            DST="\$DST/version.json" COMMIT_SHA="${COMMIT_SHA}"
          EOF

      - name: Push env + restart script and run
        env:
          DATABASE_URL:  ${{ secrets.DATABASE_URL }}
          RSR_USERNAME:  ${{ secrets.RSR_USERNAME }}
          RSR_PASSWORD:  ${{ secrets.RSR_PASSWORD }}
          RSR_FTP_HOST:  ${{ secrets.RSR_FTP_HOST }}
          RSR_FTP_PORT:  ${{ secrets.RSR_FTP_PORT }}
          RSR_FTPS:      ${{ secrets.RSR_FTPS }}

          RSR_STANDARD_USERNAME: ${{ secrets.RSR_STANDARD_USERNAME }}
          RSR_STANDARD_PASSWORD: ${{ secrets.RSR_STANDARD_PASSWORD }}

          # Authorize.Net (may be blank; we will set safe defaults)
          AUTHORIZE_NET_API_LOGIN_ID:    ${{ secrets.AUTHORIZE_NET_API_LOGIN_ID }}
          AUTHORIZE_NET_TRANSACTION_KEY: ${{ secrets.AUTHORIZE_NET_TRANSACTION_KEY }}

          SENDGRID_API_KEY:              ${{ secrets.SENDGRID_API_KEY }}

          # Algolia
          ALGOLIA_APP_ID:        ${{ secrets.ALGOLIA_APP_ID }}
          ALGOLIA_API_KEY:       ${{ secrets.ALGOLIA_API_KEY }}
          ALGOLIA_ADMIN_API_KEY: ${{ secrets.ALGOLIA_ADMIN_API_KEY }}
          ALGOLIA_ADMIN_KEY:     ${{ secrets.ALGOLIA_ADMIN_KEY }}

          # API base + upstream auth header
          INVENTORY_ORIGIN:         ${{ secrets.INVENTORY_ORIGIN }}
          INVENTORY_DEV_PUBLIC_URL: ${{ secrets.INVENTORY_DEV_PUBLIC_URL }}
          SERVICE_KEY:              ${{ secrets.SERVICE_KEY }}
          SERVICE_KEY_HEADER:       ${{ secrets.SERVICE_KEY_HEADER }}
        run: |
          set -euo pipefail

          ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" 'install -d -m 700 /root/pm2'

          # Compute effective keys/urls
          SEARCH_EFFECTIVE="${ALGOLIA_API_KEY:-}"
          ADMIN_EFFECTIVE="${ALGOLIA_ADMIN_API_KEY:-${ALGOLIA_ADMIN_KEY:-}}"
          if [ -z "${SEARCH_EFFECTIVE}" ]; then SEARCH_EFFECTIVE="${ADMIN_EFFECTIVE}"; fi

          # Authorize.Net safe defaults for launch if unset
          ANET_LOGIN_EFFECTIVE="${AUTHORIZE_NET_API_LOGIN_ID:-sandbox_skip}"
          ANET_KEY_EFFECTIVE="${AUTHORIZE_NET_TRANSACTION_KEY:-sandbox_skip}"
          ANET_ENDPOINT_EFFECTIVE="https://apitest.authorize.net/xml/v1/request.api"

          envfile="$(mktemp)"; umask 077
          {
            echo "PORT=5000"
            echo "NODE_ENV=production"
            echo "DATABASE_URL=${DATABASE_URL}"

            # RSR
            echo "RSR_FTP_HOST=${RSR_FTP_HOST:-ftps.rsrgroup.com}"
            echo "RSR_FTP_PORT=${RSR_FTP_PORT:-2222}"
            echo "RSR_PORT=${RSR_FTP_PORT:-2222}"
            echo "RSR_FTPS=${RSR_FTPS:-1}"
            echo "RSR_USERNAME=${RSR_USERNAME}"
            echo "RSR_PASSWORD=${RSR_PASSWORD}"
            [ -n "${RSR_STANDARD_USERNAME:-}" ] && echo "RSR_STANDARD_USERNAME=${RSR_STANDARD_USERNAME}"
            [ -n "${RSR_STANDARD_PASSWORD:-}" ] && echo "RSR_STANDARD_PASSWORD=${RSR_STANDARD_PASSWORD}"

            # Authorize.Net (placeholders unless real creds provided)
            echo "AUTHORIZE_NET_API_LOGIN_ID=${ANET_LOGIN_EFFECTIVE}"
            echo "AUTHORIZE_NET_TRANSACTION_KEY=${ANET_KEY_EFFECTIVE}"
            echo "AUTHORIZE_NET_ENDPOINT=${ANET_ENDPOINT_EFFECTIVE}"

            # SendGrid (optional)
            [ -n "${SENDGRID_API_KEY:-}" ] && echo "SENDGRID_API_KEY=${SENDGRID_API_KEY}"

            # Algolia
            [ -n "${ALGOLIA_APP_ID:-}" ] && echo "ALGOLIA_APP_ID=${ALGOLIA_APP_ID}"
            [ -n "${ADMIN_EFFECTIVE:-}" ] && { echo "ALGOLIA_ADMIN_API_KEY=${ADMIN_EFFECTIVE}"; echo "ALGOLIA_ADMIN_KEY=${ADMIN_EFFECTIVE}"; }
            [ -n "${SEARCH_EFFECTIVE:-}" ] && echo "ALGOLIA_API_KEY=${SEARCH_EFFECTIVE}"

            # API base
            INV="${INVENTORY_ORIGIN:-${INVENTORY_DEV_PUBLIC_URL:-}}"
            echo "INVENTORY_ORIGIN=${INV}"

            # Optional upstream auth header
            [ -n "${SERVICE_KEY_HEADER:-}" ] && echo "SERVICE_KEY_HEADER=${SERVICE_KEY_HEADER}"
            [ -n "${SERVICE_KEY:-}" ] && echo "SERVICE_KEY=${SERVICE_KEY}"

            echo "REQUIRE_PRODUCTS=0"
          } > "$envfile"

          [ -f "scripts/restart.sh" ] || { echo "::error::scripts/restart.sh missing in repo"; rm -f "$envfile"; exit 1; }

          scp -P "$SSH_PORT" "$envfile" "$SSH_USER@$SSH_HOST:/root/pm2/frostline.env"
          scp -P "$SSH_PORT" "scripts/restart.sh" "$SSH_USER@$SSH_HOST:/root/pm2/restart.sh"
          rm -f "$envfile"

          ssh -p "$SSH_PORT" "$SSH_USER@$SSH_HOST" bash -se << 'EOF'
          set -euo pipefail
          chmod 700 /root/pm2/restart.sh
          /root/pm2/restart.sh

          # Quick probes (non-fatal)
          set +e
          . /root/pm2/frostline.env 2>/dev/null
          HDR=()
          if [ -n "${SERVICE_KEY_HEADER:-}" ] && [ -n "${SERVICE_KEY:-}" ]; then
            HDR+=(--header "$(printf '%s: %s' "$SERVICE_KEY_HEADER" "$SERVICE_KEY")")
          fi
          echo "Probe 1: ${INVENTORY_ORIGIN%/}/api/firearms-compliance/config"
          curl -ksS -o /root/pm2/probe1.json -w "\nHTTP:%{http_code} CT:%{content_type}\n" -H "Accept: application/json" "${HDR[@]}" "${INVENTORY_ORIGIN%/}/api/firearms-compliance/config"
          head -c 200 /root/pm2/probe1.json; echo

          echo "Probe 2: ${INVENTORY_ORIGIN%/}/api/products?limit=1"
          curl -ksS -o /root/pm2/probe2.json -w "\nHTTP:%{http_code} CT:%{content_type}\n" -H "Accept: application/json" "${HDR[@]}" "${INVENTORY_ORIGIN%/}/api/products?limit=1"
          head -c 200 /root/pm2/probe2.json; echo
          set -e
          EOF

      - name: Verify live version.json
        run: |
          set -euo pipefail
          curl -fsSL "$ORIGIN/version.json" | tee version.json
          LIVE_SHA=$(jq -r '.git_head // empty' version.json)
          echo "Live git_head: $LIVE_SHA"
          if [ -z "$LIVE_SHA" ]; then
            echo "::warning::version.json missing git_head"
          elif [ "$LIVE_SHA" != "${GITHUB_SHA}" ]; then
            echo "::error::Live commit ($LIVE_SHA) != workflow commit (${GITHUB_SHA})"; exit 1;
          else
            echo "Live matches this workflow commit."
          fi
