REPL CHAT PASTE — FrostLine (single app)

Goal: Make /api/orders/:orderId/summary return the exact fields the frozen Order Confirmation page expects. 
We will (1) replace one route to add compatibility aliases, (2) verify JSON, (3) load the page.

1) Replace the summary route (aliases added so UI stops showing “129” and “—”):
- Open (create if missing): server/routes/orderSummaryById.js  (if your file is .ts, adapt the imports/exports accordingly)
- Replace the entire file with:

----------------------------------------------------------------
const express = require('express');
const { readSnapshot, writeSnapshot } = require('../lib/storage');
const { splitOutcomes } = require('../lib/shippingSplit');
const { mintOrderNumber } = require('../lib/orderNumbers');

const router = express.Router();

router.get('/api/orders/:orderId/summary', (req, res) => {
  const orderId = String(req.params.orderId || '').trim();
  if (!orderId) return res.status(400).json({ error: 'orderId required' });

  const snap = readSnapshot(orderId);
  if (!snap) return res.status(404).json({ error: 'Order snapshot not found for this orderId' });

  // Normalize outcomes & mint once
  let outcomes;
  try { outcomes = splitOutcomes(snap.shippingOutcomes || ['IH>Customer']); }
  catch (e) { return res.status(400).json({ error: e.message }); }

  const minted = snap.minted || mintOrderNumber(outcomes);
  if (!snap.minted) {
    snap.minted = minted;
    snap.updatedAt = new Date().toISOString();
    writeSnapshot(orderId, snap);
  }

  // Enforce required fields so UI never renders blanks silently
  const items = Array.isArray(snap.items) ? snap.items.filter(Boolean) : [];
  const missing = [];
  items.forEach((it, i) => {
    if (!it.upc) missing.push(`items[${i}].upc`);
    if (!it.mpn) missing.push(`items[${i}].mpn`);
    if (!it.sku) missing.push(`items[${i}].sku`);
    if (!it.name) missing.push(`items[${i}].name`);
    if (it.price === undefined || it.price === null) missing.push(`items[${i}].price`);
    if (!it.imageUrl) missing.push(`items[${i}].imageUrl`);
    if (!it.qty && it.qty !== 0) missing.push(`items[${i}].qty`);
  });
  if (missing.length) {
    return res.status(422).json({ error: 'Snapshot incomplete for summary', fields: missing });
  }

  // Build full-cart lines (primary shape) + add compatibility aliases at the line level
  const linesAll = items.map(toLineWithAliases);

  // Per-shipment (Amazon-style) using optional allocations
  const parts = (minted.parts.length ? minted.parts : [{ outcome: outcomes[0], orderNumber: minted.main }]);
  const alloc = (snap.allocations && typeof snap.allocations === 'object') ? snap.allocations : null;

  const shipments = parts.map((p, idx) => {
    const shipItems = itemsForOutcome(p.outcome || outcomes[0], items, alloc);
    const shipLines = shipItems.map(toLineWithAliases);
    return {
      idx,
      outcome: p.outcome || outcomes[0],
      orderNumber: p.orderNumber || minted.main,
      lines: shipLines,
      totals: computeTotals(shipLines)
    };
  });

  const totals = sumTotals(shipments.map(s => s.totals));

  // Add nested alias "order.orderNumber" for legacy reads
  return res.json({
    orderId,
    orderNumber: minted.main,             // primary key the UI should read
    order: { orderNumber: minted.main },  // legacy alias some UIs expect
    mainOrderNumber: minted.main,         // keep for other consumers
    multiShipment: minted.parts.length > 0,
    lines: linesAll,                      // top-level lines (UI iterates this)
    shipments,                            // Amazon-style splits (per outcome)
    customer: snap.customer || {},
    totals,
    status: snap.status || 'processing',
    txnId: snap.txnId || ''
  });
});

function toLineWithAliases(it) {
  const qty = Number(it.qty || 1);
  const unit = Number(it.price || 0);
  const imageUrl = String(it.imageUrl || '');
  const sku = String(it.sku || '');
  const upc = String(it.upc || '');
  const mpn = String(it.mpn || '');
  const name = String(it.name || '');

  const base = {
    qty,
    pricingSnapshot: { retail: unit },
    unitPrice: unit,
    extendedPrice: round2(unit * qty),
    product: {
      sku, upc, mpn, name,
      image: { url: imageUrl }
    }
  };

  // Line-level aliases (legacy reads): imageUrl / upc / mpn / sku / name on the line itself
  base.imageUrl = imageUrl;
  base.upc = upc;
  base.mpn = mpn;
  base.sku = sku;
  base.name = name;

  return base;
}

function itemsForOutcome(outcome, items, allocations) {
  if (!allocations || !allocations[outcome]) return items;
  const a = allocations[outcome];
  if (!Array.isArray(a) || !a.length) return [];
  if (typeof a[0] === 'number') return a.map(i => items[i]).filter(Boolean);
  // selector objects
  return a.map(sel => {
    const found = items.find(it =>
      (sel.sku && it.sku === sel.sku) ||
      (sel.upc && it.upc === sel.upc) ||
      (sel.mpn && it.mpn === sel.mpn)
    );
    if (!found) return null;
    return { ...found, qty: (sel.qty ?? found.qty) };
  }).filter(Boolean);
}

function computeTotals(lines) {
  const sub = lines.reduce((s, ln) => s + Number(ln.extendedPrice || 0), 0);
  return { subtotal: round2(sub), tax: 0, shipping: 0, grandTotal: round2(sub) };
}
function sumTotals(list) {
  return list.reduce((acc, t) => ({
    subtotal: round2((acc.subtotal||0) + (t.subtotal||0)),
    tax: round2((acc.tax||0) + (t.tax||0)),
    shipping: round2((acc.shipping||0) + (t.shipping||0)),
    grandTotal: round2((acc.grandTotal||0) + (t.grandTotal||0)),
  }), { subtotal:0,tax:0,shipping:0,grandTotal:0 });
}
function round2(n) { return Math.round(Number(n) * 100) / 100; }

module.exports = router;
----------------------------------------------------------------

2) Verify the summary JSON (your URL + orderId=129):
Run this in the Replit shell:
node scripts/check-summary.js https://4f937a25-00c8-498d-9fa5-eb24f01732eb-00-9p4bpqrd7jc1.janeway.replit.dev 129

Expect:
- orderNumber includes "-0" or "-Z*"
- lines[0] has qty, pricingSnapshot.retail
- lines[0] shows both product.image.url AND line-level imageUrl/upc/mpn/sku/name

3) Open the page:
https://4f937a25-00c8-498d-9fa5-eb24f01732eb-00-9p4bpqrd7jc1.janeway.replit.dev/order-confirmation?orderId=129

Confirm on the page:
- TGF Order Number displays the minted number (not "129")
- “Shipment A” shows the item name, UPC, MPN, and the image renders
- Total Paid matches the JSON subtotal (585.00 in our seeded snapshot)