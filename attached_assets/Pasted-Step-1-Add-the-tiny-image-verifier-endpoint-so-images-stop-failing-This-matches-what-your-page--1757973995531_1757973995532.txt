Step 1 — Add the tiny image-verifier endpoint (so images stop failing)

This matches what your page calls (/api/images/verify/...) and green-lights any local /images/... URL.

A) Create file: server/routes/imageVerify.js

const express = require('express');
const router = express.Router();

// GET /api/images/verify/<encodedURL>
// v1 rule: if it points to our own /images/*, consider it valid (200). Otherwise 404.
// This prevents the UI from marking images as invalid when they are local.
router.get('/api/images/verify/:encoded', (req, res) => {
  try {
    const raw = decodeURIComponent(req.params.encoded || '');
    if (typeof raw === 'string' && raw.startsWith('/images/')) {
      return res.status(200).json({ ok: true, url: raw });
    }
    return res.status(404).json({ ok: false, reason: 'non-local-url' });
  } catch {
    return res.status(400).json({ ok: false, reason: 'bad-encoding' });
  }
});

module.exports = router;


B) Wire it once in your server entry (no UI edits): open your server bootstrap (e.g. server/index.js or wherever you const app = express()), and add one line with the other app.use(...) calls:

app.use(require('./routes/imageVerify'));


C) Quick check (in Replit shell):

curl -sS -i "https://4f937a25-00c8-498d-9fa5-eb24f01732eb-00-9p4bpqrd7jc1.janeway.replit.dev/api/images/verify/%2Fimages%2Fplaceholder.jpg" | head -n 5


Expect a 200 and a small JSON body.

D) Hard-refresh the page:

https://4f937a25-00c8-498d-9fa5-eb24f01732eb-00-9p4bpqrd7jc1.janeway.replit.dev/order-confirmation?orderId=130


Tell me what you see now for:

Image (renders yes/no)

UPC / MPN (still “—” or showing values?)

TGF Order Number (still 130 or minted 100008-0?)

Then I’ll give you the single next step to make the header and UPC/MPN fill reliably (no UI changes).

You said:
DO not worry about images on the order summary screen, it is irrelevant to the items. Lets get orders processing.
ChatGPT said:
Thought for 42s

Got it. We’ll stop fussing with images and wire payment-success → snapshot → redirect so orders actually process. One step. Exact paste.

Step 1 — Auto-write the order snapshot on payment success (then redirect)
A) Create (client) client/src/lib/finalizeOrder.ts
// client/src/lib/finalizeOrder.ts
type CartLine = {
  upc: string;            // REQUIRED (your search key)
  mpn?: string;           // nice-to-have
  sku?: string;           // not used for biz logic but kept if present
  name: string;
  qty: number;
  price: number;          // unit price charged
};

type Customer = { email: string; name?: string };

export async function finalizeOrder(opts: {
  orderId: string | number;            // the id you already use in ?orderId=
  txnId: string;                       // Authorize.net transaction id
  status?: 'processing'|'paid'|'fulfilled'|'canceled';
  shippingOutcomes?: ('IH>Customer'|'DS>FFL'|'IH>FFL'|'DS>Customer')[];
  lines: CartLine[];
  customer: Customer;
}) {
  const {
    orderId, txnId, lines, customer,
    status = 'processing',
    shippingOutcomes = ['IH>Customer'],
  } = opts;

  // Minimal shape the server expects; no images required.
  const payload = {
    txnId,
    status,
    customer,
    shippingOutcomes,
    items: lines.map(l => ({
      upc: String(l.upc),
      mpn: l.mpn ? String(l.mpn) : '',
      sku: l.sku ? String(l.sku) : '',
      name: String(l.name),
      qty: Number(l.qty || 1),
      price: Number(l.price || 0),
      imageUrl: '/images/placeholder.jpg' // ignored by business logic
    }))
  };

  const res = await fetch(`/api/orders/${encodeURIComponent(orderId)}/snapshot`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    credentials: 'include',
    body: JSON.stringify(payload),
  });

  if (!res.ok) {
    const err = await res.text().catch(()=>'');
    throw new Error(`snapshot failed ${res.status}: ${err}`);
  }

  // Redirect the buyer to the frozen confirmation page
  window.location.href = `/order-confirmation?orderId=${encodeURIComponent(String(orderId))}`;
}

B) Call it in your payment-success handler

Wherever you currently handle Authorize.net approval (the place you know you have transactionId and the cart lines), add:

import { finalizeOrder } from '../lib/finalizeOrder'; // adjust relative path as needed

// inside your payment success callback:
await finalizeOrder({
  orderId,                          // the same one you pass in ?orderId=
  txnId: transactionIdFromAnet,     // e.g., response.transactionResponse.transId
  customer: { email: buyerEmail, name: buyerName },
  lines: cartLines.map(l => ({
    upc: l.upc,                     // your cart’s canonical search key
    mpn: l.mpn,                     // if you have it
    sku: l.sku,                     // optional
    name: l.name,
    qty: l.qty,
    price: l.unitPrice,
  })),
  // Optional: customize if a firearm is in the cart:
  shippingOutcomes: hasFirearm ? ['DS>FFL'] : ['IH>Customer'],
});

C) What I need from you

Tell me the file where you pasted the call (e.g., client/src/pages/checkout.tsx), and

After you run a real checkout, paste the URL you landed on (e.g., /order-confirmation?orderId=131) and whether the page now shows a non-empty order (even if the image says “No Image”).